/* eslint-disable @typescript-eslint/no-unused-vars */
/**
 * 该文件由脚本自动生成，如需修改请联系 PMC
 * This file generated by scripts of tdesign-api. `npm run api:docs Timeline React(PC) vitest,finalProject`
 * If you need to modify this file, contact PMC first please.
 */
import React from 'react';
import { fireEvent, vi, render } from '@test/utils';
import { Timeline, TimelineItem } from '..';
import { getTimelineDefaultMount, getTimelineItemMount } from './mount';

describe('Timeline Component', () => {
  const labelAlignClassNameMap = {
    left: 't-timeline-left',
    alternate: 't-timeline-alternate',
    right: 't-timeline-right',
  };
  Object.entries(labelAlignClassNameMap).forEach(([enumValue, expectedClassName]) => {
    it(`props.labelAlign is equal to ${enumValue}`, () => {
      let propValue = { true: true, false: false }[enumValue];
      propValue = propValue === undefined ? enumValue : propValue;
      const { container } = getTimelineDefaultMount(Timeline, { labelAlign: propValue });
      expect(container.firstChild).toHaveClass(expectedClassName);
    });
  });

  it('props.labelAlign: layout=horizontal labelAlign=top works fine', () => {
    const { container } = getTimelineDefaultMount(Timeline, { layout: 'horizontal', labelAlign: 'top' });
    const domWrapper = container.querySelector('.t-timeline');
    expect(domWrapper).toHaveClass('t-timeline-top');
  });
  it('props.labelAlign: layout=horizontal labelAlign=bottom works fine', () => {
    const { container } = getTimelineDefaultMount(Timeline, { layout: 'horizontal', labelAlign: 'bottom' });
    const domWrapper = container.querySelector('.t-timeline');
    expect(domWrapper).toHaveClass('t-timeline-bottom');
  });

  ['horizontal', 'vertical'].forEach((item) => {
    it(`props.layout is equal to ${item}`, () => {
      const { container } = getTimelineDefaultMount(Timeline, { layout: item });
      expect(container.firstChild).toHaveClass(`t-timeline-${item}`);
    });
  });

  ['alternate', 'same'].forEach((item) => {
    it(`props.mode is equal to ${item}`, () => {
      const { container } = render(<Timeline mode={item}></Timeline>);
      expect(container.firstChild).toHaveClass(`t-timeline-label--${item}`);
    });
  });

  it('props.reverse is equal true', () => {
    const { container } = getTimelineDefaultMount(Timeline, { reverse: true });
    expect(container.querySelector('.t-timeline-item__content').textContent).toBe('Event4');
  });

  it('props.theme is equal dot', () => {
    const { container } = getTimelineDefaultMount(Timeline, { theme: 'dot' });
    expect(container.querySelectorAll('.t-timeline-item__tail--theme-dot').length).toBe(4);
  });
});

describe('TimelineItem Component', () => {
  it('props.children works fine', () => {
    const { container } = render(
      <TimelineItem>
        <span className="custom-node">TNode</span>
      </TimelineItem>,
    );
    expect(container.querySelector('.custom-node')).toBeTruthy();
    expect(container).toMatchSnapshot();
  });

  it('props.content works fine', () => {
    const { container } = render(<TimelineItem content={<span className="custom-node">TNode</span>}></TimelineItem>);
    expect(container.querySelector('.custom-node')).toBeTruthy();
    expect(container).toMatchSnapshot();
  });

  it('props.dot works fine', () => {
    const { container } = render(<TimelineItem dot={<span className="custom-node">TNode</span>}></TimelineItem>);
    expect(container.querySelector('.custom-node')).toBeTruthy();
  });

  const dotColorClassNameMap = {
    primary: 't-timeline-item__dot--primary',
    warning: 't-timeline-item__dot--warning',
    error: 't-timeline-item__dot--error',
    default: 't-timeline-item__dot--default',
  };
  Object.entries(dotColorClassNameMap).forEach(([enumValue, expectedClassName]) => {
    it(`props.dotColor is equal to ${enumValue}`, () => {
      let propValue = { true: true, false: false }[enumValue];
      propValue = propValue === undefined ? enumValue : propValue;
      const wrapper = render(<TimelineItem dotColor={propValue}></TimelineItem>);
      const container = wrapper.container.querySelector('.t-timeline-item__dot');
      expect(container).toHaveClass(expectedClassName);
    });
  });

  it(`props.dotColor is equal to yellowgreen`, () => {
    const { container } = render(<TimelineItem dotColor="yellowgreen"></TimelineItem>);
    const domWrapper = container.querySelector('.t-timeline-item__dot');
    expect(domWrapper.style.borderColor).toBe('yellowgreen');
  });

  it('props.label works fine', () => {
    const { container } = render(<TimelineItem label={<span className="custom-node">TNode</span>}></TimelineItem>);
    expect(container.querySelector('.custom-node')).toBeTruthy();
    expect(container).toMatchSnapshot();
  });

  it.skip('props.labelAlign is equal left', () => {
    const { container } = getTimelineItemMount(TimelineItem, { labelAlign: 'left' });
    expect(container.querySelectorAll('.t-timeline-item:first-child .t-timeline-item-left').length).toBe(1);
  });

  it('props.loading: TimelineItem contains element `.t-timeline-item__dot .t-loading`', () => {
    // loading default value is
    const { container } = render(<TimelineItem></TimelineItem>);
    expect(container.querySelector('.t-timeline-item__dot .t-loading')).toBeFalsy();
    // loading = false
    const { container: container1 } = render(<TimelineItem loading={false}></TimelineItem>);
    expect(container1.querySelector('.t-timeline-item__dot .t-loading')).toBeFalsy();
    // loading = true
    const { container: container2 } = render(<TimelineItem loading={true}></TimelineItem>);
    expect(container2.querySelector('.t-timeline-item__dot .t-loading')).toBeTruthy();
  });
});
