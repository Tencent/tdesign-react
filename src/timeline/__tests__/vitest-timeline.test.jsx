/* eslint-disable @typescript-eslint/no-unused-vars */
/**
 * 该文件由脚本自动生成，如需修改请联系 PMC
 * This file generated by scripts of tdesign-api. `npm run api:docs Timeline React(PC) vitest,finalProject`
 * If you need to modify this file, contact PMC first please.
 */
import React from 'react';
import { render } from '@test/utils';
import { Timeline } from '..';
import { getTimelineDefaultMount } from './mount';

describe('Timeline Component', () => {
  const labelAlignClassNameMap = {
    left: 't-timeline-left',
    alternate: 't-timeline-alternate',
    right: 't-timeline-right',
  };
  Object.entries(labelAlignClassNameMap).forEach(([enumValue, expectedClassName]) => {
    it(`props.labelAlign is equal to ${enumValue}`, () => {
      let propValue = { true: true, false: false }[enumValue];
      propValue = propValue === undefined ? enumValue : propValue;
      const { container } = getTimelineDefaultMount(Timeline, { labelAlign: propValue });
      expect(container.firstChild).toHaveClass(expectedClassName);
    });
  });

  it('props.labelAlign: layout=horizontal labelAlign=top works fine', () => {
    const { container } = getTimelineDefaultMount(Timeline, { layout: 'horizontal', labelAlign: 'top' });
    const domWrapper = container.querySelector('.t-timeline');
    expect(domWrapper).toHaveClass('t-timeline-top');
  });
  it('props.labelAlign: layout=horizontal labelAlign=bottom works fine', () => {
    const { container } = getTimelineDefaultMount(Timeline, { layout: 'horizontal', labelAlign: 'bottom' });
    const domWrapper = container.querySelector('.t-timeline');
    expect(domWrapper).toHaveClass('t-timeline-bottom');
  });

  ['horizontal', 'vertical'].forEach((item) => {
    it(`props.layout is equal to ${item}`, () => {
      const { container } = getTimelineDefaultMount(Timeline, { layout: item });
      expect(container.firstChild).toHaveClass(`t-timeline-${item}`);
    });
  });

  ['alternate', 'same'].forEach((item) => {
    it(`props.mode is equal to ${item}`, () => {
      const { container } = render(<Timeline mode={item}></Timeline>);
      expect(container.firstChild).toHaveClass(`t-timeline-label--${item}`);
    });
  });

  it('props.reverse is equal true', () => {
    const { container } = getTimelineDefaultMount(Timeline, { reverse: true });
    expect(container.querySelector('.t-timeline-item__content').textContent).toBe('Event4');
  });

  it('props.theme is equal dot', () => {
    const { container } = getTimelineDefaultMount(Timeline, { theme: 'dot' });
    expect(container.querySelectorAll('.t-timeline-item__tail--theme-dot').length).toBe(4);
  });
});
