/* eslint-disable @typescript-eslint/no-unused-vars */
/**
 * 该文件由脚本自动生成，如需修改请联系 PMC
 * This file generated by scripts of tdesign-api. `npm run api:docs TreeSelect React(PC) vitest,finalProject`
 * If you need to modify this file, contact PMC first please.
 */
import React from 'react';
import {
  fireEvent,
  vi,
  render,
  mockDelay,
  simulateInputChange,
  simulateDocumentMouseEvent,
  simulateInputEnter,
} from '@test/utils';
import { TreeSelect } from '..';
import { getTreeSelectDefaultMount, getTreeSelectMultipleMount } from './mount';

describe('TreeSelect Component', () => {
  it(`props.autofocus is equal to false`, () => {
    const { container } = render(<TreeSelect autofocus={false}></TreeSelect>);
    const domWrapper = container.querySelector('input');
    expect(domWrapper.getAttribute('autofocus')).toBeNull();
  });
  it(`props.autofocus is equal to true`, () => {
    const { container } = render(<TreeSelect autofocus={true}></TreeSelect>);
    const domWrapper = container.querySelector('input');
    expect(domWrapper.getAttribute('autofocus')).toBeDefined();
  });

  it('props.borderless works fine', () => {
    // borderless default value is false
    const { container: container1 } = render(<TreeSelect></TreeSelect>);
    expect(container1.querySelector(`.${'t-select-input--borderless'}`)).toBeFalsy();
    // borderless = true
    const { container: container2 } = render(<TreeSelect borderless={true}></TreeSelect>);
    expect(container2.firstChild).toHaveClass('t-select-input--borderless');
    // borderless = false
    const { container: container3 } = render(<TreeSelect borderless={false}></TreeSelect>);
    expect(container3.querySelector(`.${'t-select-input--borderless'}`)).toBeFalsy();
  });

  it('props.clearable: empty value can not show clear icon', async () => {
    const { container } = render(<TreeSelect clearable={true}></TreeSelect>);
    fireEvent.mouseEnter(container.querySelector('.t-input'));
    await mockDelay();
    expect(container.querySelector('.t-input__suffix-clear')).toBeFalsy();
  });

  it('props.clearable: show clear icon on mouse enter in single tree select', async () => {
    const { container } = getTreeSelectDefaultMount(TreeSelect, { value: 1, clearable: true });
    fireEvent.mouseEnter(container.querySelector('.t-input'));
    await mockDelay();
    expect(container.querySelector('.t-input__suffix-clear')).toBeTruthy();
  });

  it('props.clearable: show clear icon on mouse enter in multiple tree select', async () => {
    const { container } = getTreeSelectMultipleMount(TreeSelect, { value: [1], clearable: true });
    fireEvent.mouseEnter(container.querySelector('.t-input'));
    await mockDelay();
    expect(container.querySelector('.t-tag-input__suffix-clear')).toBeTruthy();
  });

  it('props.collapsedItems works fine', () => {
    const { container } = getTreeSelectMultipleMount(TreeSelect, {
      collapsedItems: <span className="custom-node">TNode</span>,
      minCollapsedNum: 2,
      value: [1, 3, '5'],
      data: [
        { label: 'tdesign-vue', value: 1 },
        { label: 'tdesign-react', value: 2 },
        { label: 'tdesign-miniprogram', value: 3 },
        { label: 'tdesign-angular', value: '5' },
        { label: 'tdesign-mobile-vue', value: '6' },
      ],
    });
    expect(container.querySelector('.custom-node')).toBeTruthy();
  });

  it('props.collapsedItems is a function with params', () => {
    const fn = vi.fn();
    getTreeSelectMultipleMount(TreeSelect, {
      collapsedItems: fn,
      minCollapsedNum: 2,
      value: [1, 3, '5'],
      data: [
        { label: 'tdesign-vue', value: 1 },
        { label: 'tdesign-react', value: 2 },
        { label: 'tdesign-miniprogram', value: 3 },
        { label: 'tdesign-angular', value: '5' },
        { label: 'tdesign-mobile-vue', value: '6' },
      ],
    });
    expect(fn).toHaveBeenCalled();
    expect(fn.mock.calls[0][0].count).toBe(1);
    expect(fn.mock.calls[0][0].value).toEqual([
      { label: 'tdesign-vue', value: 1 },
      { label: 'tdesign-miniprogram', value: 3 },
      { label: 'tdesign-angular', value: '5' },
    ]);
    expect(fn.mock.calls[0][0].collapsedSelectedItems).toEqual([{ label: 'tdesign-angular', value: '5' }]);
  });

  it('props.data: empty data with panel content node', () => {
    const { container } = render(<TreeSelect data={[]}></TreeSelect>);
    fireEvent.click(container.querySelector('.t-input'));
    const tSelectEmptyDom = document.querySelector('.t-select__empty');
    expect(tSelectEmptyDom).toBeTruthy();
  });

  it('props.disabled works fine', () => {
    // disabled default value is
    const wrapper1 = render(<TreeSelect></TreeSelect>);
    const container1 = wrapper1.container.querySelector('.t-input');
    expect(container1.querySelector(`.${'t-is-disabled'}`)).toBeFalsy();
    // disabled = true
    const wrapper2 = render(<TreeSelect disabled={true}></TreeSelect>);
    const container2 = wrapper2.container.querySelector('.t-input');
    expect(container2).toHaveClass('t-is-disabled');
    // disabled = false
    const wrapper3 = render(<TreeSelect disabled={false}></TreeSelect>);
    const container3 = wrapper3.container.querySelector('.t-input');
    expect(container3.querySelector(`.${'t-is-disabled'}`)).toBeFalsy();
  });

  it('props.disabled: disabled TreeSelect can not open popup', () => {
    const onPopupVisibleChangeFn = vi.fn();
    const { container } = render(
      <TreeSelect disabled={true} onPopupVisibleChange={onPopupVisibleChangeFn}></TreeSelect>,
    );
    fireEvent.click(container.querySelector('.t-input'));
    expect(onPopupVisibleChangeFn).not.toHaveBeenCalled();
  });

  it('props.disabled: cant not show clear icon on mouse enter in single tree select', async () => {
    const { container } = getTreeSelectDefaultMount(TreeSelect, { value: 1, disabled: true });
    fireEvent.mouseEnter(container.querySelector('.t-input'));
    await mockDelay();
    expect(container.querySelector('.t-input__suffix-clear')).toBeFalsy();
  });

  it('props.disabled: cant not show clear icon on mouse enter in multiple tree select', async () => {
    const { container } = getTreeSelectMultipleMount(TreeSelect, { value: [1], disabled: true });
    fireEvent.mouseEnter(container.querySelector('.t-input'));
    await mockDelay();
    expect(container.querySelector('.t-tag-input__suffix-clear')).toBeFalsy();
  });

  it('props.empty works fine', () => {
    const { container } = render(<TreeSelect empty={<span className="custom-node">TNode</span>}></TreeSelect>);
    fireEvent.click(container.querySelector('.t-input'));
    const customNodeDom = document.querySelector('.custom-node');
    expect(customNodeDom).toBeTruthy();
  });

  it('props.filter: multiple tree select & filterable', async () => {
    const { container } = getTreeSelectMultipleMount(TreeSelect, {
      filter: (filterWord, node) => !filterWord || node.data.label === filterWord,
    });
    fireEvent.click(container.querySelector('.t-input'));
    const inputDom1 = container.querySelector('input');
    simulateInputChange(inputDom1, 'tdesign-react');
    await mockDelay(100);
    const tTreeItemNotTTreeItemHiddenDom = document.querySelectorAll('.t-tree__item:not(.t-tree__item--hidden)');
    expect(tTreeItemNotTTreeItemHiddenDom.length).toBe(1);
  });

  it('props.filter: priority of onSearch is higher than props.filter, props.filter is forbidden to work in this scene', async () => {
    const { container } = getTreeSelectMultipleMount(TreeSelect, {
      onSearch: () => {},
      filter: (filterWord, option) => !filterWord || option.label === filterWord,
    });
    fireEvent.click(container.querySelector('.t-input'));
    const inputDom1 = container.querySelector('input');
    simulateInputChange(inputDom1, 'tdesign-react');
    await mockDelay(100);
    const tTreeItemNotTTreeItemHiddenDom = document.querySelectorAll('.t-tree__item:not(.t-tree__item--hidden)');
    expect(tTreeItemNotTTreeItemHiddenDom.length).toBe(6);
  });

  it('props.filter: multiple tree select, check filter nodes', async () => {
    const { container } = getTreeSelectMultipleMount(TreeSelect, { filterable: true });
    fireEvent.click(container.querySelector('.t-input'));
    const inputDom1 = container.querySelector('input');
    simulateInputChange(inputDom1, 'tdesign-vue');
    await mockDelay(100);
    fireEvent.click(document.querySelector('.t-tree__item:first-child'));
  });

  it('props.filter: single tree select, check filter nodes', async () => {
    const onChangeFn2 = vi.fn();
    const { container } = getTreeSelectDefaultMount(TreeSelect, { filterable: true }, { onChange: onChangeFn2 });
    fireEvent.click(container.querySelector('.t-input'));
    const inputDom1 = container.querySelector('input');
    simulateInputChange(inputDom1, 'tdesign-vue');
    await mockDelay(100);
    fireEvent.click(document.querySelector('.t-tree__item:first-child'));
    expect(onChangeFn2).toHaveBeenCalled();
    expect(onChangeFn2.mock.calls[0][0]).toBe(1);
    expect(onChangeFn2.mock.calls[0][1].node).toBeTruthy();
    expect(onChangeFn2.mock.calls[0][1].data).toEqual({ label: 'tdesign-vue', value: 1 });
    expect(onChangeFn2.mock.calls[0][1].trigger).toBe('check');
    expect(onChangeFn2.mock.calls[0][1].e.type).toBe('click');
  });

  it('props.filterable works fine', async () => {
    const { container } = getTreeSelectDefaultMount(TreeSelect, { inputValue: 'tdesign-vue', filterable: true });
    fireEvent.click(container.querySelector('.t-input'));
    await mockDelay(100);
    const tTreeItemNotTTreeItemHiddenDom = document.querySelectorAll('.t-tree__item:not(.t-tree__item--hidden)');
    expect(tTreeItemNotTTreeItemHiddenDom.length).toBe(1);
  });

  it(`props.inputProps is equal to {name:'tree-select-input-name'}`, () => {
    const { container } = render(<TreeSelect inputProps={{ name: 'tree-select-input-name' }}></TreeSelect>);
    const domWrapper = container.querySelector('input');
    expect(domWrapper.getAttribute('name')).toBe('tree-select-input-name');
  });

  it('props.inputValue: uncontrolled inputValue works fine', () => {
    const onInputChangeFn1 = vi.fn();
    const { container } = getTreeSelectMultipleMount(
      TreeSelect,
      { filterable: true },
      { onInputChange: onInputChangeFn1 },
    );
    fireEvent.click(container.querySelector('.t-input'));
    const inputDom1 = container.querySelector('input');
    simulateInputChange(inputDom1, 'tdesign');
    const attrDom1 = container.querySelector('input');
    expect(attrDom1.value).toBe('tdesign');
    expect(onInputChangeFn1).toHaveBeenCalled();
    expect(onInputChangeFn1.mock.calls[0][0]).toBe('tdesign');
    expect(onInputChangeFn1.mock.calls[0][1].e.type).toBe('change');
    expect(onInputChangeFn1.mock.calls[0][1].trigger).toBe('input');
  });

  it('props.inputValue: controlled inputValue works fine', () => {
    const onInputChangeFn = vi.fn();
    const { container } = getTreeSelectMultipleMount(
      TreeSelect,
      { filterable: true, inputValue: 'tdesign', popupVisible: true },
      { onInputChange: onInputChangeFn },
    );
    const inputDom = container.querySelector('input');
    simulateInputChange(inputDom, 'Hello TDesign');
    const attrDom = container.querySelector('input');
    expect(attrDom.value).toBe('tdesign');
    expect(onInputChangeFn).toHaveBeenCalled();
    expect(onInputChangeFn.mock.calls[0][0]).toBe('Hello TDesign');
    expect(onInputChangeFn.mock.calls[0][1].e.type).toBe('change');
    expect(onInputChangeFn.mock.calls[0][1].trigger).toBe('input');
  });

  it('props.loading: TreeSelect contains element `.t-loading`', () => {
    // loading default value is false
    const { container } = render(<TreeSelect></TreeSelect>);
    expect(container.querySelector('.t-loading')).toBeFalsy();
    // loading = false
    const { container: container1 } = render(<TreeSelect loading={false}></TreeSelect>);
    expect(container1.querySelector('.t-loading')).toBeFalsy();
    // loading = true
    const { container: container2 } = render(<TreeSelect loading={true}></TreeSelect>);
    expect(container2.querySelector('.t-loading')).toBeTruthy();
  });

  it('props.loadingText works fine', () => {
    const { container } = render(
      <TreeSelect loadingText={<span className="custom-node">TNode</span>} loading={true}></TreeSelect>,
    );
    fireEvent.click(container.querySelector('.t-input'));
    const customNodeDom = document.querySelector('.custom-node');
    expect(customNodeDom).toBeTruthy();
    const tSelectLoadingTipsDom = document.querySelector('.t-select__loading-tips');
    expect(tSelectLoadingTipsDom).toBeTruthy();
  });

  it('props.loadingText: loading status show loading text in panel', () => {
    const { container } = render(<TreeSelect loading={true}></TreeSelect>);
    fireEvent.click(container.querySelector('.t-input'));
    const tSelectLoadingTipsDom = document.querySelector('.t-select__loading-tips');
    expect(tSelectLoadingTipsDom).toBeTruthy();
  });

  it('props.max works fine', async () => {
    const onChangeFn1 = vi.fn();
    const { container } = getTreeSelectMultipleMount(
      TreeSelect,
      { max: 2, value: [1, '4'] },
      { onChange: onChangeFn1 },
    );
    fireEvent.click(container.querySelector('.t-input'));
    await mockDelay(300);
    fireEvent.click(document.querySelector('.t-popup .t-tree__item:last-child .t-checkbox__label'));
    expect(onChangeFn1).not.toHaveBeenCalled();
  });

  it('props.minCollapsedNum works fine. `{".t-tag":3,".t-tag:last-child":{"text":"+3"}}` should exist', () => {
    const { container } = getTreeSelectMultipleMount(TreeSelect, { minCollapsedNum: 2 });
    expect(container.querySelectorAll('.t-tag').length).toBe(3);
    expect(container.querySelector('.t-tag:last-child').textContent).toBe('+3');
  });

  it('props.placeholder works fine', () => {
    const wrapper = render(<TreeSelect placeholder={'this is tree select placeholder'}></TreeSelect>);
    const container = wrapper.container.querySelector('input');
    expect(container.getAttribute('placeholder')).toBe('this is tree select placeholder');
  });

  it('props.popupProps works fine', () => {
    const { container } = render(
      <TreeSelect popupProps={{ overlayClassName: 'custom-popup-class-name' }}></TreeSelect>,
    );
    fireEvent.click(container.querySelector('.t-input'));
    const domWrapper = document.querySelector('.t-popup');
    expect(domWrapper).toHaveClass('custom-popup-class-name');
  });

  it('props.popupVisible works fine', () => {
    // popupVisible default value is undefined
    const { container: container1 } = render(<TreeSelect></TreeSelect>);
    expect(container1.querySelector(`.${'t-select-input--popup-visible'}`)).toBeFalsy();
    // popupVisible = true
    const { container: container2 } = render(<TreeSelect popupVisible={true}></TreeSelect>);
    expect(container2.firstChild).toHaveClass('t-select-input--popup-visible');
    // popupVisible = false
    const { container: container3 } = render(<TreeSelect popupVisible={false}></TreeSelect>);
    expect(container3.querySelector(`.${'t-select-input--popup-visible'}`)).toBeFalsy();
  });

  it('props.prefixIcon works fine', () => {
    const { container } = render(<TreeSelect prefixIcon={<span className="custom-node">TNode</span>}></TreeSelect>);
    expect(container.querySelector('.custom-node')).toBeTruthy();
  });

  it('props.readonly works fine', () => {
    const onPopupVisibleChangeFn = vi.fn();
    const { container } = render(
      <TreeSelect readonly={true} onPopupVisibleChange={onPopupVisibleChangeFn}></TreeSelect>,
    );
    fireEvent.click(container.querySelector('.t-input'));
    expect(onPopupVisibleChangeFn).not.toHaveBeenCalled();
  });

  const sizeClassNameList = ['t-size-s', { 't-size-m': false }, 't-size-l'];
  ['small', 'medium', 'large'].forEach((item, index) => {
    it(`props.size is equal to ${item}`, () => {
      const wrapper = render(<TreeSelect size={item}></TreeSelect>);
      const container = wrapper.container.querySelector('.t-input');
      if (typeof sizeClassNameList[index] === 'string') {
        expect(container).toHaveClass(sizeClassNameList[index]);
      } else if (typeof sizeClassNameList[index] === 'object') {
        const classNameKey = Object.keys(sizeClassNameList[index])[0];
        expect(container.querySelector(`.${classNameKey}`)).toBeFalsy();
      }
    });
  });

  const statusClassNameList = [{ 't-is-default': false }, 't-is-success', 't-is-warning', 't-is-error'];
  ['default', 'success', 'warning', 'error'].forEach((item, index) => {
    it(`props.status is equal to ${item}`, () => {
      const wrapper = render(<TreeSelect status={item}></TreeSelect>);
      const container = wrapper.container.querySelector('.t-input');
      if (typeof statusClassNameList[index] === 'string') {
        expect(container).toHaveClass(statusClassNameList[index]);
      } else if (typeof statusClassNameList[index] === 'object') {
        const classNameKey = Object.keys(statusClassNameList[index])[0];
        expect(container.querySelector(`.${classNameKey}`)).toBeFalsy();
      }
    });
  });

  it('props.tagProps is equal { theme: warning }', () => {
    const { container } = getTreeSelectMultipleMount(TreeSelect, { tagProps: { theme: 'warning' } });
    expect(container.querySelectorAll('.t-tag--warning').length).toBe(5);
  });

  it('props.tips is equal this is a tip', () => {
    const { container } = render(<TreeSelect tips={'this is a tip'}></TreeSelect>);
    expect(container.querySelectorAll('.t-input__tips').length).toBe(1);
  });

  it(`props.value is equal to tdesign-vue`, () => {
    const { container } = render(<TreeSelect value={'tdesign-vue'}></TreeSelect>);
    const domWrapper = container.querySelector('input');
    expect(domWrapper.value).toBe('tdesign-vue');
  });

  it('props.valueDisplay works fine', () => {
    const { container } = getTreeSelectMultipleMount(TreeSelect, {
      valueDisplay: <span className="custom-node">TNode</span>,
      value: 1,
      data: [{ label: 'tdesign-vue', value: 1 }],
    });
    expect(container.querySelector('.custom-node')).toBeTruthy();
  });

  it('props.valueDisplay is a function with params', () => {
    const fn = vi.fn();
    getTreeSelectMultipleMount(TreeSelect, { valueDisplay: fn, value: 1, data: [{ label: 'tdesign-vue', value: 1 }] });
    expect(fn).toHaveBeenCalled();
    expect(fn.mock.calls[0][0].value).toEqual([{ label: 'tdesign-vue', value: 1 }]);
    expect(fn.mock.calls[0][0].onClose).toBeTruthy();
  });

  it('props.valueType is equal object', () => {
    const { container } = getTreeSelectDefaultMount(TreeSelect, {
      valueType: 'object',
      multiple: true,
      value: [{ label: 'tdesign-vue', value: 1 }],
    });
    expect(container.querySelectorAll('.t-tag').length).toBe(1);
  });

  it('events.blur: single select blur works fine', async () => {
    const onFocusFn = vi.fn();
    const onBlurFn1 = vi.fn();
    const { container } = getTreeSelectDefaultMount(
      TreeSelect,
      { filterable: true, value: 1 },
      { onFocus: onFocusFn, onBlur: onBlurFn1 },
    );
    fireEvent.click(container.querySelector('.t-input'));
    await mockDelay(100);
    expect(onFocusFn).toHaveBeenCalled();
    expect(onFocusFn.mock.calls[0][0].e.type).toBe('focus');
    expect(onFocusFn.mock.calls[0][0].value).toBe(1);
    simulateDocumentMouseEvent(document, 'mousedown');
    expect(onBlurFn1).toHaveBeenCalled();
    expect(onBlurFn1.mock.calls[0][0].e.type).toBe('mousedown');
    expect(onBlurFn1.mock.calls[0][0].value).toBe(1);
  });

  it('events.blur: multiple select blur works fine', () => {
    const onFocusFn = vi.fn();
    const onBlurFn1 = vi.fn();
    const { container } = getTreeSelectMultipleMount(
      TreeSelect,
      { filterable: true, value: [1] },
      { onFocus: onFocusFn, onBlur: onBlurFn1 },
    );
    fireEvent.click(container.querySelector('.t-input'));
    expect(onFocusFn).toHaveBeenCalled();
    expect(onFocusFn.mock.calls[0][0].e.type).toBe('focus');
    simulateDocumentMouseEvent(document, 'mousedown');
    expect(onBlurFn1).toHaveBeenCalled();
    expect(onBlurFn1.mock.calls[0][0].e.type).toBe('mousedown');
    expect(onBlurFn1.mock.calls[0][0].value).toEqual([1]);
  });

  it('events.change: Single TreeSelect, click one tree item to trigger value change', async () => {
    const onChangeFn1 = vi.fn();
    const { container } = getTreeSelectDefaultMount(
      TreeSelect,
      { treeProps: { expandAll: true } },
      { onChange: onChangeFn1 },
    );
    fireEvent.click(container.querySelector('.t-input'));
    await mockDelay(200);
    fireEvent.click(document.querySelector('.t-tree__item:nth-child(3)'));
    expect(onChangeFn1).toHaveBeenCalled();
    expect(onChangeFn1.mock.calls[0][0]).toBe('2.1');
    expect(onChangeFn1.mock.calls[0][1].e.type).toBe('click');
    expect(onChangeFn1.mock.calls[0][1].node.label).toBe('tdesign-web-react');
    expect(onChangeFn1.mock.calls[0][1].data).toEqual({ label: 'tdesign-web-react', value: '2.1' });
  });

  it('events.change: Multiple TreeSelect, click one tree item to trigger value change', async () => {
    const onChangeFn1 = vi.fn();
    const { container } = getTreeSelectMultipleMount(
      TreeSelect,
      { treeProps: { expandAll: true } },
      { onChange: onChangeFn1 },
    );
    fireEvent.click(container.querySelector('.t-input'));
    await mockDelay(200);
    fireEvent.click(document.querySelector('.t-tree__item:last-child .t-checkbox__label'));
    expect(onChangeFn1).toHaveBeenCalled();
    expect(onChangeFn1.mock.calls[0][0]).toEqual([1, '2.1', '2.2', 3, '4', '5', '6']);
    expect(onChangeFn1.mock.calls[0][1].trigger).toBe('check');
    expect(onChangeFn1.mock.calls[0][1].e.type).toBe('change');
    expect(onChangeFn1.mock.calls[0][1].node.label).toBe('tdesign-mobile-vue');
    expect(onChangeFn1.mock.calls[0][1].data).toEqual({ label: 'tdesign-mobile-vue', value: '6' });
  });

  it('events.change: Multiple TreeSelect, click one tree item to delete', async () => {
    const onChangeFn1 = vi.fn();
    const { container } = getTreeSelectMultipleMount(
      TreeSelect,
      { treeProps: { expandAll: true } },
      { onChange: onChangeFn1 },
    );
    fireEvent.click(container.querySelector('.t-input'));
    await mockDelay(200);
    fireEvent.click(document.querySelector('.t-tree__item:first-child .t-checkbox__label'));
    expect(onChangeFn1).toHaveBeenCalled();
    expect(onChangeFn1.mock.calls[0][0]).toEqual(['2.1', '2.2', 3, '4', '5']);
    expect(onChangeFn1.mock.calls[0][1].trigger).toBe('uncheck');
    expect(onChangeFn1.mock.calls[0][1].e.type).toBe('change');
    expect(onChangeFn1.mock.calls[0][1].node.label).toBe('tdesign-vue');
  });

  it('events.clear: Multiple TreeSelect, clear all value on click clear icon', async () => {
    const onClearFn1 = vi.fn();
    const onChangeFn1 = vi.fn();
    const onPopupVisibleChangeFn1 = vi.fn();
    const { container } = getTreeSelectMultipleMount(
      TreeSelect,
      { clearable: true },
      { onClear: onClearFn1, onChange: onChangeFn1, onPopupVisibleChange: onPopupVisibleChangeFn1 },
    );
    fireEvent.mouseEnter(container.querySelector('.t-input'));
    await mockDelay();
    fireEvent.click(container.querySelector('.t-tag-input__suffix-clear'));
    expect(onClearFn1).toHaveBeenCalled();
    expect(onClearFn1.mock.calls[0][0].e.type).toBe('click');
    expect(onChangeFn1).toHaveBeenCalled();
    expect(onChangeFn1.mock.calls[0][0]).toEqual([]);
    expect(onChangeFn1.mock.calls[0][1].trigger).toBe('clear');
    expect(onPopupVisibleChangeFn1).toHaveBeenCalled();
    expect(onPopupVisibleChangeFn1.mock.calls[0][0]).toBe(false);
    expect(onPopupVisibleChangeFn1.mock.calls[0][1].trigger).toBe('clear');
  });

  it('events.clear: Single TreeSelect, clear value on click clear icon', async () => {
    const onClearFn1 = vi.fn();
    const onChangeFn1 = vi.fn();
    const onPopupVisibleChangeFn1 = vi.fn();
    const { container } = getTreeSelectDefaultMount(
      TreeSelect,
      { value: 1, clearable: true },
      { onClear: onClearFn1, onChange: onChangeFn1, onPopupVisibleChange: onPopupVisibleChangeFn1 },
    );
    fireEvent.mouseEnter(container.querySelector('.t-input'));
    await mockDelay();
    fireEvent.click(container.querySelector('.t-input__suffix-clear'));
    expect(onClearFn1).toHaveBeenCalled();
    expect(onClearFn1.mock.calls[0][0].e.type).toBe('click');
    expect(onChangeFn1).toHaveBeenCalled();
    expect(onChangeFn1.mock.calls[0][0]).toBe(undefined);
    expect(onChangeFn1.mock.calls[0][1].trigger).toBe('clear');
    expect(onPopupVisibleChangeFn1).toHaveBeenCalled();
    expect(onPopupVisibleChangeFn1.mock.calls[0][0]).toBe(false);
    expect(onPopupVisibleChangeFn1.mock.calls[0][1].trigger).toBe('clear');
  });

  it('events.focus works fine', () => {
    const onFocusFn = vi.fn();
    const { container } = getTreeSelectMultipleMount(
      TreeSelect,
      { filterable: true, value: [1] },
      { onFocus: onFocusFn },
    );
    fireEvent.focus(container.querySelector('input'));
    expect(onFocusFn).toHaveBeenCalled();
    expect(onFocusFn.mock.calls[0][0].value).toEqual([1]);
    expect(onFocusFn.mock.calls[0][0].e.type).toBe('focus');
  });

  it('events.focus works fine', () => {
    const onFocusFn = vi.fn();
    const { container } = getTreeSelectMultipleMount(
      TreeSelect,
      { filterable: true, value: [{ label: 'tdesign-vue', value: 1 }] },
      { onFocus: onFocusFn },
    );
    fireEvent.focus(container.querySelector('input'));
    expect(onFocusFn).toHaveBeenCalled();
    expect(onFocusFn.mock.calls[0][0].value).toEqual([{ label: 'tdesign-vue', value: 1 }]);
    expect(onFocusFn.mock.calls[0][0].e.type).toBe('focus');
  });

  it('events.inputChange: clear filter words on change', async () => {
    const onInputChangeFn1 = vi.fn();
    const { container } = getTreeSelectMultipleMount(
      TreeSelect,
      { inputValue: 'tdesign-vue' },
      { onInputChange: onInputChangeFn1 },
    );
    fireEvent.click(container.querySelector('.t-input'));
    await mockDelay(200);
    fireEvent.click(document.querySelector('.t-tree__item:first-child .t-checkbox__label'));
    expect(onInputChangeFn1).toHaveBeenCalled();
    expect(onInputChangeFn1.mock.calls[0][0]).toBe('');
    expect(onInputChangeFn1.mock.calls[0][1].trigger).toBe('change');
  });

  it('events.popupVisibleChange works fine', async () => {
    const onPopupVisibleChangeFn = vi.fn();
    const { container } = getTreeSelectMultipleMount(
      TreeSelect,
      { inputValue: 'tdesign' },
      { onPopupVisibleChange: onPopupVisibleChangeFn },
    );
    fireEvent.click(container.querySelector('.t-input'));
    await mockDelay(200);
    expect(onPopupVisibleChangeFn).toHaveBeenCalled();
    expect(onPopupVisibleChangeFn.mock.calls[0][0]).toBe(true);
  });

  it('events.remove: remove first value on click close icon', () => {
    const onRemoveFn = vi.fn();
    const { container } = getTreeSelectMultipleMount(TreeSelect, {}, { onRemove: onRemoveFn });
    fireEvent.click(container.querySelector('.t-tag__icon-close'));
    expect(onRemoveFn).toHaveBeenCalled();
    expect(onRemoveFn.mock.calls[0][0].value).toBe(1);
    expect(onRemoveFn.mock.calls[0][0].index).toBe(0);
    expect(onRemoveFn.mock.calls[0][0].trigger).toBe('tag-remove');
    expect(onRemoveFn.mock.calls[0][0].data).toEqual({ label: 'tdesign-vue', value: 1 });
    expect(onRemoveFn.mock.calls[0][0].e.type).toBe('click');
  });

  it('events.remove: remove last child on keydown.backspace', () => {
    const onRemoveFn1 = vi.fn();
    const { container } = getTreeSelectMultipleMount(TreeSelect, { filterable: true }, { onRemove: onRemoveFn1 });
    fireEvent.click(container.querySelector('.t-input'));
    fireEvent.keyDown(container.querySelector('input'), { key: 'Backspace', code: 'Backspace', charCode: 8 });
    expect(onRemoveFn1).toHaveBeenCalled();
    expect(onRemoveFn1.mock.calls[0][0].value).toBe('5');
    expect(onRemoveFn1.mock.calls[0][0].index).toBe(4);
    expect(onRemoveFn1.mock.calls[0][0].trigger).toBe('backspace');
    expect(onRemoveFn1.mock.calls[0][0].data).toEqual({ label: 'tdesign-angular', value: '5' });
    expect(onRemoveFn1.mock.calls[0][0].e.type).toBe('keydown');
  });

  it('events.search: Single TreeSelect, trigger search event on input text', () => {
    const onSearchFn1 = vi.fn();
    const { container } = getTreeSelectDefaultMount(TreeSelect, { filterable: true }, { onSearch: onSearchFn1 });
    fireEvent.click(container.querySelector('.t-input'));
    const inputDom1 = container.querySelector('input');
    simulateInputChange(inputDom1, 'tdesign-vue');
    expect(onSearchFn1).toHaveBeenCalled();
    expect(onSearchFn1.mock.calls[0][0]).toBe('tdesign-vue');
  });

  it('events.search: Single TreeSelect, trigger search event on input enter', () => {
    const onSearchFn2 = vi.fn();
    const { container } = getTreeSelectDefaultMount(TreeSelect, { filterable: true }, { onSearch: onSearchFn2 });
    fireEvent.click(container.querySelector('.t-input'));
    const inputDom1 = container.querySelector('input');
    simulateInputChange(inputDom1, 'tdesign-vue');
    const inputDom2 = container.querySelector('input');
    simulateInputEnter(inputDom2);
    expect(onSearchFn2).toHaveBeenCalled();
    expect(onSearchFn2.mock.calls[1][0]).toBe('tdesign-vue');
  });

  it('events.search: Multiple TreeSelect, trigger search event on input text', () => {
    const onSearchFn1 = vi.fn();
    const { container } = getTreeSelectMultipleMount(TreeSelect, { filterable: true }, { onSearch: onSearchFn1 });
    fireEvent.click(container.querySelector('.t-input'));
    const inputDom1 = container.querySelector('input');
    simulateInputChange(inputDom1, 'tdesign-vue');
    expect(onSearchFn1).toHaveBeenCalled();
    expect(onSearchFn1.mock.calls[0][0]).toBe('tdesign-vue');
  });

  it('events.search: Multiple TreeSelect, trigger search event on input enter', () => {
    const onSearchFn2 = vi.fn();
    const { container } = getTreeSelectMultipleMount(TreeSelect, { filterable: true }, { onSearch: onSearchFn2 });
    fireEvent.click(container.querySelector('.t-input'));
    const inputDom1 = container.querySelector('input');
    simulateInputChange(inputDom1, 'tdesign-vue');
    const inputDom2 = container.querySelector('input');
    simulateInputEnter(inputDom2);
    expect(onSearchFn2).toHaveBeenCalled();
    expect(onSearchFn2.mock.calls[1][0]).toBe('tdesign-vue');
  });
});
