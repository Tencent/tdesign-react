/* eslint-disable @typescript-eslint/no-unused-vars */
/**
 * 该文件由脚本自动生成，如需修改请联系 PMC
 * This file generated by scripts of tdesign-api. `npm run api:docs TreeSelect React(PC) vitest,finalProject`
 * If you need to modify this file, contact PMC first please.
 */
import React from 'react';
import { fireEvent, vi, render, mockDelay, simulateInputChange } from '@test/utils';
import { TreeSelect } from '..';
import { getTreeDefaultMount } from './mount';

describe('TreeSelect Component', () => {
  it('props.borderless works fine', () => {
    // borderless default value is false
    const { container: container1 } = render(<TreeSelect></TreeSelect>);
    expect(container1.querySelector(`.${'t-select-input--borderless'}`)).toBeFalsy();
    // borderless = true
    const { container: container2 } = render(<TreeSelect borderless={true}></TreeSelect>);
    expect(container2.firstChild).toHaveClass('t-select-input--borderless');
    // borderless = false
    const { container: container3 } = render(<TreeSelect borderless={false}></TreeSelect>);
    expect(container3.querySelector(`.${'t-select-input--borderless'}`)).toBeFalsy();
  });

  it('props.clearable: empty value can not show clear icon', async () => {
    const { container } = render(<TreeSelect clearable={true}></TreeSelect>);
    fireEvent.mouseEnter(container.querySelector('.t-input'));
    await mockDelay();
    expect(container.querySelector('.t-input__suffix-clear')).toBeFalsy();
  });
  it('props.clearable: show clear icon on mouse enter in single tree select', async () => {
    const { container } = getTreeDefaultMount(TreeSelect, { value: 1, clearable: true });
    fireEvent.mouseEnter(container.querySelector('.t-input'));
    await mockDelay();
    expect(container.querySelector('.t-input__suffix-clear')).toBeTruthy();
  });
  it('props.clearable: show clear icon on mouse enter in multiple tree select', async () => {
    const { container } = getTreeDefaultMount(TreeSelect, { value: [1], multiple: true, clearable: true });
    fireEvent.mouseEnter(container.querySelector('.t-input'));
    await mockDelay();
    expect(container.querySelector('.t-tag-input__suffix-clear')).toBeTruthy();
  });

  it('props.collapsedItems works fine', () => {
    const { container } = getTreeDefaultMount(TreeSelect, {
      collapsedItems: <span className="custom-node">TNode</span>,
      minCollapsedNum: 3,
      multiple: true,
    });
    expect(container.querySelector('.custom-node')).toBeTruthy();
  });

  it('props.collapsedItems is a function with params', () => {
    const fn = vi.fn();
    getTreeDefaultMount(TreeSelect, { collapsedItems: fn, minCollapsedNum: 3, multiple: true });
    expect(fn).toHaveBeenCalled(1);
    expect(fn.mock.calls[0][0].count).toBe(5);
  });

  it('props.data: empty data with panel content node', () => {
    const { container } = render(<TreeSelect data={[]}></TreeSelect>);
    fireEvent.click(container.querySelector('.t-input'));
    const tSelectEmptyDom = document.querySelector('.t-select__empty');
    expect(tSelectEmptyDom).toBeTruthy();
  });

  it('props.disabled works fine', () => {
    // disabled default value is
    const wrapper1 = render(<TreeSelect></TreeSelect>);
    const container1 = wrapper1.container.querySelector('.t-input');
    expect(container1.querySelector(`.${'t-is-disabled'}`)).toBeFalsy();
    // disabled = true
    const wrapper2 = render(<TreeSelect disabled={true}></TreeSelect>);
    const container2 = wrapper2.container.querySelector('.t-input');
    expect(container2).toHaveClass('t-is-disabled');
    // disabled = false
    const wrapper3 = render(<TreeSelect disabled={false}></TreeSelect>);
    const container3 = wrapper3.container.querySelector('.t-input');
    expect(container3.querySelector(`.${'t-is-disabled'}`)).toBeFalsy();
  });

  it('props.empty works fine', () => {
    const { container } = render(<TreeSelect empty={<span className="custom-node">TNode</span>}></TreeSelect>);
    fireEvent.click(container.querySelector('.t-input'));
    const customNodeDom = document.querySelector('.custom-node');
    expect(customNodeDom).toBeTruthy();
  });

  it('props.filter works fine', async () => {
    const { container } = getTreeDefaultMount(TreeSelect, {
      multiple: true,
      filter: (filterWord, option) => !filterWord || option.label === filterWord,
    });
    fireEvent.click(container.querySelector('.t-input'));
    const inputDom1 = container.querySelector('input');
    simulateInputChange(inputDom1, 'tdesign-react');
    await mockDelay(100);
    const tTreeItemDom = document.querySelectorAll('.t-tree__item');
    expect(tTreeItemDom.length).toBe(1);
  });

  it('props.filterable works fine', async () => {
    const { container } = getTreeDefaultMount(TreeSelect, { inputValue: 'tdesign-vue', filterable: true });
    fireEvent.click(container.querySelector('.t-input'));
    await mockDelay(100);
    const tTreeItemDom = document.querySelectorAll('.t-tree__item');
    expect(tTreeItemDom.length).toBe(1);
  });

  it(`props.inputProps is equal to {name:'tree-select-input-name'}`, () => {
    const { container } = render(<TreeSelect inputProps={{ name: 'tree-select-input-name' }}></TreeSelect>);
    const domWrapper = container.querySelector('input');
    expect(domWrapper.getAttribute('name')).toBe('tree-select-input-name');
  });

  it(`props.inputValue is equal to tdesign-vue`, () => {
    const { container } = render(<TreeSelect inputValue="tdesign-vue"></TreeSelect>);
    const domWrapper = container.querySelector('input');
    expect(domWrapper.value).toBe('tdesign-vue');
  });

  it('props.loading: TreeSelect contains element `.t-loading`', () => {
    // loading default value is false
    const { container } = render(<TreeSelect></TreeSelect>);
    expect(container.querySelector('.t-loading')).toBeFalsy();
    // loading = false
    const { container: container1 } = render(<TreeSelect loading={false}></TreeSelect>);
    expect(container1.querySelector('.t-loading')).toBeFalsy();
    // loading = true
    const { container: container2 } = render(<TreeSelect loading={true}></TreeSelect>);
    expect(container2.querySelector('.t-loading')).toBeTruthy();
  });

  it('props.loadingText works fine', () => {
    const { container } = render(
      <TreeSelect loadingText={<span className="custom-node">TNode</span>} loading={true}></TreeSelect>,
    );
    fireEvent.click(container.querySelector('.t-input'));
    const customNodeDom = document.querySelector('.custom-node');
    expect(customNodeDom).toBeTruthy();
    const tSelectLoadingTipsDom = document.querySelector('.t-select__loading-tips');
    expect(tSelectLoadingTipsDom).toBeTruthy();
  });

  it('props.loadingText: loading status show loading text in panel', () => {
    const { container } = render(<TreeSelect loading={true}></TreeSelect>);
    fireEvent.click(container.querySelector('.t-input'));
    const tSelectLoadingTipsDom = document.querySelector('.t-select__loading-tips');
    expect(tSelectLoadingTipsDom).toBeTruthy();
  });

  it('props.prefixIcon works fine', () => {
    const { container } = render(<TreeSelect prefixIcon={<span className="custom-node">TNode</span>}></TreeSelect>);
    expect(container.querySelector('.custom-node')).toBeTruthy();
  });

  const sizeClassNameList = ['t-size-s', { 't-size-m': false }, 't-size-l'];
  ['small', 'medium', 'large'].forEach((item, index) => {
    it(`props.size is equal to ${item}`, () => {
      const wrapper = render(<TreeSelect size={item}></TreeSelect>);
      const container = wrapper.container.querySelector('.t-input');
      if (typeof sizeClassNameList[index] === 'string') {
        expect(container).toHaveClass(sizeClassNameList[index]);
      } else if (typeof sizeClassNameList[index] === 'object') {
        const classNameKey = Object.keys(sizeClassNameList[index])[0];
        expect(container.querySelector(`.${classNameKey}`)).toBeFalsy();
      }
    });
  });

  const statusClassNameList = [{ 't-is-default': false }, 't-is-success', 't-is-warning', 't-is-error'];
  ['default', 'success', 'warning', 'error'].forEach((item, index) => {
    it(`props.status is equal to ${item}`, () => {
      const wrapper = render(<TreeSelect status={item}></TreeSelect>);
      const container = wrapper.container.querySelector('.t-input');
      if (typeof statusClassNameList[index] === 'string') {
        expect(container).toHaveClass(statusClassNameList[index]);
      } else if (typeof statusClassNameList[index] === 'object') {
        const classNameKey = Object.keys(statusClassNameList[index])[0];
        expect(container.querySelector(`.${classNameKey}`)).toBeFalsy();
      }
    });
  });

  it('props.tips is equal this is a tip', () => {
    const { container } = render(<TreeSelect tips="this is a tip"></TreeSelect>);
    expect(container.querySelectorAll('.t-input__tips').length).toBe(1);
  });
});
