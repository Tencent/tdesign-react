/* eslint-disable @typescript-eslint/no-unused-vars */
/**
 * 该文件由脚本自动生成，如需修改请联系 PMC
 * This file generated by scripts of tdesign-api. `npm run api:docs Link React(PC) vitest,finalProject`
 * If you need to modify this file, contact PMC first please.
 */
import React from 'react';
import { fireEvent, vi, render } from '@test/utils';
import { Link } from '..';

describe('Link Component', () => {
  it('props.children works fine', () => {
    const { container } = render(
      <Link>
        <span className="custom-node">TNode</span>
      </Link>,
    );
    expect(container.querySelector('.custom-node')).toBeTruthy();
    expect(container).toMatchSnapshot();
  });

  it('props.content works fine', () => {
    const { container } = render(<Link content={<span className="custom-node">TNode</span>}></Link>);
    expect(container.querySelector('.custom-node')).toBeTruthy();
    expect(container).toMatchSnapshot();
  });

  it('props.disabled works fine', () => {
    // disabled default value is
    const { container: container1 } = render(<Link>Text</Link>);
    expect(container1.querySelector(`.${'t-is-disabled'}`)).toBeFalsy();
    // disabled = true
    const { container: container2 } = render(<Link disabled={true}>Text</Link>);
    expect(container2.firstChild).toHaveClass('t-is-disabled');
    expect(container2).toMatchSnapshot();
    // disabled = false
    const { container: container3 } = render(<Link disabled={false}>Text</Link>);
    expect(container3.querySelector(`.${'t-is-disabled'}`)).toBeFalsy();
    expect(container3).toMatchSnapshot();
  });

  ['color', 'underline'].forEach((item) => {
    it(`props.hover is equal to ${item}`, () => {
      const { container } = render(<Link hover={item}>Text</Link>);
      expect(container.firstChild).toHaveClass(`t-link--hover-${item}`);
      expect(container).toMatchSnapshot();
    });
  });

  it('props.href works fine', () => {
    const { container } = render(<Link href="https://tdesign.tencent.com/">Text</Link>);
    expect(container.firstChild.getAttribute('href')).toBe('https://tdesign.tencent.com/');
    expect(container).toMatchSnapshot();
  });

  it('props.prefixIcon works fine', () => {
    const { container } = render(<Link prefixIcon={<span className="custom-node">TNode</span>}></Link>);
    expect(container.querySelector('.custom-node')).toBeTruthy();
  });

  const sizeClassNameList = ['t-size-s', { 't-size-m': false }, 't-size-l'];
  ['small', 'medium', 'large'].forEach((item, index) => {
    it(`props.size is equal to ${item}`, () => {
      const { container } = render(<Link size={item}>Text</Link>);
      if (typeof sizeClassNameList[index] === 'string') {
        expect(container.firstChild).toHaveClass(sizeClassNameList[index]);
      } else if (typeof sizeClassNameList[index] === 'object') {
        const classNameKey = Object.keys(sizeClassNameList[index])[0];
        expect(container.querySelector(`.${classNameKey}`)).toBeFalsy();
      }
      expect(container).toMatchSnapshot();
    });
  });

  it('props.suffixIcon works fine', () => {
    const { container } = render(<Link suffixIcon={<span className="custom-node">TNode</span>}></Link>);
    expect(container.querySelector('.custom-node')).toBeTruthy();
  });

  it('props.target works fine', () => {
    const { container } = render(<Link target="_blank">Text</Link>);
    expect(container.firstChild.getAttribute('target')).toBe('_blank');
    expect(container).toMatchSnapshot();
  });

  ['default', 'primary', 'danger', 'warning', 'success'].forEach((item) => {
    it(`props.theme is equal to ${item}`, () => {
      const { container } = render(<Link theme={item}>Text</Link>);
      expect(container.firstChild).toHaveClass(`t-link--theme-${item}`);
      expect(container).toMatchSnapshot();
    });
  });

  it('props.underline works fine', () => {
    // underline default value is
    const { container: container1 } = render(<Link>Text</Link>);
    expect(container1.querySelector(`.${'t-is-underline'}`)).toBeFalsy();
    // underline = true
    const { container: container2 } = render(<Link underline={true}>Text</Link>);
    expect(container2.firstChild).toHaveClass('t-is-underline');
    // underline = false
    const { container: container3 } = render(<Link underline={false}>Text</Link>);
    expect(container3.querySelector(`.${'t-is-underline'}`)).toBeFalsy();
  });

  it('events.click works fine', () => {
    const fn = vi.fn();
    const { container } = render(<Link onClick={fn}></Link>);
    fireEvent.click(container.firstChild);
    expect(fn).toHaveBeenCalled();
    expect(fn.mock.calls[0][0].stopPropagation).toBeTruthy();
    expect(fn.mock.calls[0][0].type).toBe('click');
  });
});
