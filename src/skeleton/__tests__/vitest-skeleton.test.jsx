/* eslint-disable @typescript-eslint/no-unused-vars */
/**
 * 该文件由脚本自动生成，如需修改请联系 PMC
 * This file generated by scripts of tdesign-api. `npm run api:docs Skeleton React(PC) vitest,finalProject`
 * If you need to modify this file, contact PMC first please.
 */
import React from 'react';
import { fireEvent, vi, render, mockDelay, screen } from '@test/utils';
import { Skeleton } from '..';
import { getSkeletonDefaultMount, getSkeletonInfo } from './mount';

describe('Skeleton Component', () => {
  ['gradient', 'flashed', 'none'].forEach((item) => {
    it(`props.animation is equal to ${item}`, () => {
      const wrapper = getSkeletonDefaultMount(Skeleton, { animation: item });
      const container = wrapper.container.querySelector('.t-skeleton__col');
      expect(container).toHaveClass(`t-skeleton--animation-${item}`);
    });
  });

  it('props.children works fine', () => {
    const { container } = render(
      <Skeleton loading={false}>
        <span className="custom-node">TNode</span>
      </Skeleton>,
    );
    expect(container.querySelector('.custom-node')).toBeTruthy();
    expect(container).toMatchSnapshot();
  });

  it('props.content works fine', () => {
    const { container } = render(
      <Skeleton content={<span className="custom-node">TNode</span>} loading={false}></Skeleton>,
    );
    expect(container.querySelector('.custom-node')).toBeTruthy();
    expect(container).toMatchSnapshot();
  });

  it('props.delay: show loading delay 100ms', async () => {
    const props = { delay: 100, loading: true };
    const { mountedContent, getContent } = getSkeletonInfo(Skeleton, props);
    expect(mountedContent.container.querySelector('.t-skeleton__row')).toBeFalsy();
    await mockDelay(50);
    mountedContent.rerender(getContent(Skeleton, {...props, loading: false}));
    expect(mountedContent.container.querySelector('.t-skeleton__row')).toBeFalsy();
    await mockDelay(80);
    expect(mountedContent.container.querySelector('.t-skeleton__row')).toBeFalsy();

    mountedContent.rerender(getContent(Skeleton, {...props, loading: true}));
    expect(mountedContent.container.querySelector('.t-skeleton__row')).toBeFalsy();
    await mockDelay(150);
    expect(mountedContent.container.querySelector('.t-skeleton__row')).toBeTruthy();
    mountedContent.rerender(getContent(Skeleton, {...props, loading: false}));
    expect(mountedContent.container.querySelector('.t-skeleton__row')).toBeTruthy();
    await mockDelay(650);
    expect(mountedContent.container.querySelector('.t-skeleton__row')).toBeFalsy();
  });

  it('props.loading is equal true', () => {
    const { container } = getSkeletonDefaultMount(Skeleton, { loading: true });
    expect(container.querySelectorAll('.t-skeleton__row').length).toBe(1);
  });

  it('props.loading is equal false', () => {
    const { container } = getSkeletonDefaultMount(Skeleton, { loading: false });
    expect(container.querySelectorAll('.t-skeleton__row').length).toBe(0);
  });

  it('props.rowCol is equal [1,1,2]', () => {
    const { container } = getSkeletonDefaultMount(Skeleton, { rowCol: [1, 1, 2] });
    expect(container.querySelectorAll('.t-skeleton__row').length).toBe(3);
    expect(container.querySelectorAll('.t-skeleton__row:first-child .t-skeleton__col').length).toBe(1);
    expect(container.querySelectorAll('.t-skeleton__row:nth-child(2) .t-skeleton__col').length).toBe(1);
    expect(container.querySelectorAll('.t-skeleton__row:nth-child(3) .t-skeleton__col').length).toBe(2);
  });

  it('props.rowCol is equal [1, 1, { width: 100px }]', () => {
    const { container } = getSkeletonDefaultMount(Skeleton, { rowCol: [1, 1, { width: '100px' }] });
    expect(container.querySelectorAll('.t-skeleton__row').length).toBe(3);
    expect(container.querySelectorAll('.t-skeleton__row:first-child .t-skeleton__col').length).toBe(1);
    expect(container.querySelectorAll('.t-skeleton__row:nth-child(3) .t-skeleton__col').length).toBe(1);
  });

  it('props.rowCol is equal [1, 2, [{ width: 100, height: 35 }, { width: 101, height: 36, marginLeft: 16 }]]', () => {
    const { container } = getSkeletonDefaultMount(Skeleton, {
      rowCol: [
        1,
        2,
        [
          { width: 100, height: 35 },
          { width: 101, height: 36, marginLeft: 16 },
        ],
      ],
    });
    expect(container.querySelectorAll('.t-skeleton__row:first-child .t-skeleton__col').length).toBe(1);
    expect(container.querySelectorAll('.t-skeleton__row:nth-child(2) .t-skeleton__col').length).toBe(2);
    expect(container.querySelectorAll('.t-skeleton__row:nth-child(3) .t-skeleton__col').length).toBe(2);
  });

  it(`props.rowCol is equal to [1, 1, { width: '100px' }]`, () => {
    const { container } = getSkeletonDefaultMount(Skeleton, { rowCol: [1, 1, { width: '100px' }] });
    const domWrapper = container.querySelector('.t-skeleton__row:nth-child(3) .t-skeleton__col');
    expect(domWrapper.style.width).toBe('100px');
  });
  it(`props.rowCol is equal to [1, 2, [{ width: '100px', height: '35px' }, { width: '101px', height: '36px', marginLeft: '16px' }]]`, () => {
    const { container } = getSkeletonDefaultMount(Skeleton, {
      rowCol: [
        1,
        2,
        [
          { width: '100px', height: '35px' },
          { width: '101px', height: '36px', marginLeft: '16px' },
        ],
      ],
    });
    const domWrapper = container.querySelector('.t-skeleton__row:nth-child(3) .t-skeleton__col:first-child');
    expect(domWrapper.style.width).toBe('100px');
    const domWrapper1 = container.querySelector('.t-skeleton__row:nth-child(3) .t-skeleton__col:nth-child(2)');
    expect(domWrapper1.style.width).toBe('101px');
    expect(domWrapper1.style.height).toBe('36px');
    expect(domWrapper1.style.marginLeft).toBe('16px');
  });

  it('props.theme is equal text', () => {
    const { container } = getSkeletonDefaultMount(Skeleton, { theme: 'text' });
    expect(container.querySelectorAll('.t-skeleton__row').length).toBe(1);
    expect(container.querySelectorAll('.t-skeleton__col').length).toBe(1);
    expect(container.querySelectorAll('.t-skeleton--type-text').length).toBe(1);
  });

  it('props.theme is equal avatar', () => {
    const { container } = getSkeletonDefaultMount(Skeleton, { theme: 'avatar' });
    expect(container.querySelectorAll('.t-skeleton__row').length).toBe(1);
    expect(container.querySelectorAll('.t-skeleton__col').length).toBe(1);
    expect(container.querySelectorAll('.t-skeleton--type-circle').length).toBe(1);
  });

  it('props.theme is equal paragraph', () => {
    const { container } = getSkeletonDefaultMount(Skeleton, { theme: 'paragraph' });
    expect(container.querySelectorAll('.t-skeleton__row').length).toBe(3);
    expect(container.querySelectorAll('.t-skeleton__col').length).toBe(3);
    expect(container.querySelectorAll('.t-skeleton--type-text').length).toBe(3);
  });

  it('props.theme is equal avatar-text', () => {
    const { container } = getSkeletonDefaultMount(Skeleton, { theme: 'avatar-text' });
    expect(container.querySelectorAll('.t-skeleton__row').length).toBe(1);
    expect(container.querySelectorAll('.t-skeleton__col').length).toBe(2);
    expect(container.querySelectorAll('.t-skeleton--type-text').length).toBe(1);
    expect(container.querySelectorAll('.t-skeleton--type-circle').length).toBe(1);
  });

  it('props.theme is equal tab', () => {
    const { container } = getSkeletonDefaultMount(Skeleton, { theme: 'tab' });
    expect(container.querySelectorAll('.t-skeleton__row').length).toBe(2);
    expect(container.querySelectorAll('.t-skeleton__col').length).toBe(2);
    expect(container.querySelectorAll('.t-skeleton--type-text').length).toBe(2);
  });

  it('props.theme is equal article', () => {
    const { container } = getSkeletonDefaultMount(Skeleton, { theme: 'article' });
    expect(container.querySelectorAll('.t-skeleton__row').length).toBe(6);
  });
});
