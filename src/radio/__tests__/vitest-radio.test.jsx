/* eslint-disable @typescript-eslint/no-unused-vars */
/**
 * 该文件由脚本自动生成，如需修改请联系 PMC
 * This file generated by scripts of tdesign-api. `npm run api:docs Radio React(PC) vitest,finalProject`
 * If you need to modify this file, contact PMC first please.
 */
import React from 'react';
import { fireEvent, vi, render } from '@test/utils';
import { Radio, RadioGroup } from '..';
import { getRadioGroupKidsMount, getRadioGroupDefaultMount } from './mount';

describe('Radio Component', () => {
  it('props.allowUncheck works fine', () => {
    const onChangeFn = vi.fn();
    const { container } = render(<Radio checked={true} allowUncheck={true} onChange={onChangeFn}></Radio>);
    fireEvent.click(container.firstChild);
    expect(onChangeFn).toHaveBeenCalled();
    expect(onChangeFn.mock.calls[0][0]).toBe(false);
    expect(onChangeFn.mock.calls[0][1].e.type).toBe('click');
  });

  it('props.checked works fine', () => {
    // checked default value is false
    const { container: container1 } = render(<Radio></Radio>);
    expect(container1.querySelector(`.${'t-is-checked'}`)).toBeFalsy();
    // checked = true
    const { container: container2 } = render(<Radio checked={true}></Radio>);
    expect(container2.firstChild).toHaveClass('t-is-checked');
    expect(container2).toMatchSnapshot();
    // checked = false
    const { container: container3 } = render(<Radio checked={false}></Radio>);
    expect(container3.querySelector(`.${'t-is-checked'}`)).toBeFalsy();
    expect(container3).toMatchSnapshot();
  });

  it(`props.checked is equal to true`, () => {
    const { container } = render(<Radio checked={true}></Radio>);
    const domWrapper = container.querySelector('input');
    expect(domWrapper.checked).toBeTruthy();
    expect(container).toMatchSnapshot();
  });

  it('props.children works fine', () => {
    const { container } = render(
      <Radio>
        <span className="custom-node">TNode</span>
      </Radio>,
    );
    expect(container.querySelector('.custom-node')).toBeTruthy();
    expect(container).toMatchSnapshot();
  });

  it('props.disabled works fine', () => {
    // disabled default value is undefined
    const { container: container1 } = render(<Radio>Text</Radio>);
    expect(container1.querySelector(`.${'t-is-disabled'}`)).toBeFalsy();
    // disabled = true
    const { container: container2 } = render(<Radio disabled={true}>Text</Radio>);
    expect(container2.firstChild).toHaveClass('t-is-disabled');
    expect(container2).toMatchSnapshot();
    // disabled = false
    const { container: container3 } = render(<Radio disabled={false}>Text</Radio>);
    expect(container3.querySelector(`.${'t-is-disabled'}`)).toBeFalsy();
    expect(container3).toMatchSnapshot();
  });

  it('props.disabled works fine', () => {
    const onChangeFn = vi.fn();
    const { container } = render(
      <Radio disabled={true} onChange={onChangeFn}>
        Text
      </Radio>,
    );
    fireEvent.click(container.firstChild);
    expect(onChangeFn).not.toHaveBeenCalled();
  });

  it('props.label works fine', () => {
    const { container } = render(<Radio label={<span className="custom-node">TNode</span>}></Radio>);
    expect(container.querySelector('.custom-node')).toBeTruthy();
    expect(container.querySelector('.t-radio__label')).toBeTruthy();
    expect(container).toMatchSnapshot();
  });

  it('props.name works fine', () => {
    const wrapper = render(<Radio name="radio-gender-name"></Radio>);
    const container = wrapper.container.querySelector('input');
    expect(container.getAttribute('name')).toBe('radio-gender-name');
  });

  it(`props.value is equal to 'radio-value'`, () => {
    const { container } = render(<Radio value="radio-value"></Radio>);
    const domWrapper = container.querySelector('input');
    expect(domWrapper.value).toBe('radio-value');
  });

  it('events.click works fine', () => {
    const onClickFn = vi.fn();
    const { container } = render(<Radio onClick={onClickFn}></Radio>);
    fireEvent.click(container.firstChild);
    expect(onClickFn).toHaveBeenCalled();
    expect(onClickFn.mock.calls[0][0].e.stopPropagation).toBeTruthy();
  });
});

describe('RadioGroup Component', () => {
  it('props.allowUncheck works fine', () => {
    const onChangeFn = vi.fn();
    const { container } = getRadioGroupDefaultMount(
      RadioGroup,
      { value: 1, allowUncheck: true },
      { onChange: onChangeFn },
    );
    fireEvent.click(container.querySelector('.t-radio'));
    expect(onChangeFn).toHaveBeenCalled();
    expect(onChangeFn.mock.calls[0][0]).toBe(undefined);
    expect(onChangeFn.mock.calls[0][1].e.type).toBe('click');
  });

  it('props.allowUncheck works fine', () => {
    const onChangeFn = vi.fn();
    const { container } = getRadioGroupKidsMount(
      RadioGroup,
      { value: 1, allowUncheck: true },
      { onChange: onChangeFn },
    );
    fireEvent.click(container.querySelector('.t-radio'));
    expect(onChangeFn).toHaveBeenCalled();
    expect(onChangeFn.mock.calls[0][0]).toBe(undefined);
    expect(onChangeFn.mock.calls[0][1].e.type).toBe('click');
  });

  it('props.disabled is equal true', () => {
    const { container } = getRadioGroupDefaultMount(RadioGroup, { disabled: true });
    expect(container.querySelectorAll('.t-radio.t-is-disabled').length).toBe(4);
    expect(container).toMatchSnapshot();
  });

  it('props.disabled is equal true', () => {
    const { container } = getRadioGroupKidsMount(RadioGroup, { disabled: true });
    expect(container.querySelectorAll('.t-radio.t-is-disabled').length).toBe(4);
    expect(container).toMatchSnapshot();
  });

  it('props.disabled: disabled radio can not trigger change', () => {
    const onChangeFn = vi.fn();
    const { container } = getRadioGroupDefaultMount(RadioGroup, { disabled: true }, { onChange: onChangeFn });
    fireEvent.click(container.querySelector('.t-radio'));
    expect(onChangeFn).not.toHaveBeenCalled();
  });

  it('props.disabled: disabled radio can not trigger change', () => {
    const onChangeFn = vi.fn();
    const { container } = getRadioGroupKidsMount(RadioGroup, { disabled: true }, { onChange: onChangeFn });
    fireEvent.click(container.querySelector('.t-radio'));
    expect(onChangeFn).not.toHaveBeenCalled();
  });

  it(`props.name is equal to 'custom-radio-name'`, () => {
    const { container } = getRadioGroupDefaultMount(RadioGroup, { name: 'custom-radio-name' });
    const domWrapper = container.querySelector('input');
    expect(domWrapper.getAttribute('name')).toBe('custom-radio-name');
    expect(container).toMatchSnapshot();
  });

  it(`props.name is equal to 'custom-radio-name'`, () => {
    const { container } = getRadioGroupKidsMount(RadioGroup, { name: 'custom-radio-name' });
    const domWrapper = container.querySelector('input');
    expect(domWrapper.getAttribute('name')).toBe('custom-radio-name');
    expect(container).toMatchSnapshot();
  });

  it('props.options works fine. `{".t-radio":4}` should exist', () => {
    const { container } = getRadioGroupDefaultMount(RadioGroup);
    expect(container.querySelectorAll('.t-radio').length).toBe(4);
  });

  it('props.options works fine. `".custom-node"` should exist', () => {
    const { container } = getRadioGroupDefaultMount(RadioGroup);
    expect(container.querySelector('.custom-node')).toBeTruthy();
  });

  it('props.options works fine. `{".t-radio.t-is-disabled":1}` should exist', () => {
    const { container } = getRadioGroupDefaultMount(RadioGroup);
    expect(container.querySelectorAll('.t-radio.t-is-disabled').length).toBe(1);
  });

  it(`props.value is equal to '2'`, () => {
    const { container } = getRadioGroupDefaultMount(RadioGroup, { value: '2' });
    const domWrapper = container.querySelector('.t-radio.t-is-checked input');
    expect(domWrapper.value).toBe('2');
  });

  it(`props.value is equal to '2'`, () => {
    const { container } = getRadioGroupKidsMount(RadioGroup, { value: '2' });
    const domWrapper = container.querySelector('.t-radio.t-is-checked input');
    expect(domWrapper.value).toBe('2');
  });

  const variantClassNameList = ['t-radio-group__outline', 't-radio-group--primary-filled', 't-radio-group--filled'];
  ['outline', 'primary-filled', 'default-filled'].forEach((item, index) => {
    it(`props.variant is equal to ${item}`, () => {
      const { container } = render(<RadioGroup variant={item}></RadioGroup>);
      expect(container.firstChild).toHaveClass(variantClassNameList[index]);
    });
  });
});
