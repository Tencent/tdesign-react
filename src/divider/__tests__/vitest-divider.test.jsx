/**
 * 该文件由脚本自动生成，如需修改请联系 PMC
 * This file generated by scripts of tdesign-api. `npm run api:docs Divider React(PC) vitest,finalProject`
 * If you need to modify this file, contact PMC first please.
 */
import React from 'react';
import { render } from '@test/utils';
import { Divider } from '..';

describe('Divider Component', () => {
  ['left', 'right', 'center'].forEach((item) => {
    it(`props.align is equal to ${item}`, () => {
      const { container } = render(<Divider align={item}>Text</Divider>);
      expect(container.firstChild).toHaveClass(`t-divider--with-text-${item}`);
      expect(container).toMatchSnapshot();
    });
  });

  it('props.content works fine', () => {
    const { container } = render(<Divider content={<span className="custom-node">TNode</span>}></Divider>);
    expect(container.querySelector('.custom-node')).toBeTruthy();
    expect(container).toMatchSnapshot();
  });

  it('props.dashed works fine', () => {
    // dashed default value is false
    const { container: container1 } = render(<Divider></Divider>);
    expect(container1.querySelector(`.${'t-divider--dashed'}`)).toBeFalsy();
    // dashed = true
    const { container: container2 } = render(<Divider dashed={true}></Divider>);
    expect(container2.firstChild).toHaveClass('t-divider--dashed');
    // dashed = false
    const { container: container3 } = render(<Divider dashed={false}></Divider>);
    expect(container3.querySelector(`.${'t-divider--dashed'}`)).toBeFalsy();
  });

  ['horizontal', 'vertical'].forEach((item) => {
    it(`props.layout is equal to ${item}`, () => {
      const { container } = render(<Divider layout={item}></Divider>);
      expect(container.firstChild).toHaveClass(`t-divider--${item}`);
      expect(container).toMatchSnapshot();
    });
  });
});
