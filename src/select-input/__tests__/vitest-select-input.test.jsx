/* eslint-disable @typescript-eslint/no-unused-vars */
/**
 * 该文件由脚本自动生成，如需修改请联系 PMC
 * This file generated by scripts of tdesign-api. `npm run api:docs SelectInput React(PC) vitest,finalProject`
 * If you need to modify this file, contact PMC first please.
 */
import React from 'react';
import { fireEvent, vi, render, mockDelay } from '@test/utils';
import { SelectInput } from '..';
import { getSelectInputMultipleMount } from './mount';

describe('SelectInput Component', () => {
  it(`props.allowInput is equal to true`, () => {
    const { container } = render(<SelectInput allowInput={true}></SelectInput>);
    const domWrapper = container.querySelector('.t-input');
    expect(domWrapper.classList.contains('t-is-readonly')).toBeFalsy();
  });

  it('props.borderless works fine', () => {
    // borderless default value is false
    const { container: container1 } = render(<SelectInput></SelectInput>);
    expect(container1.querySelector(`.${'t-select-input--borderless'}`)).toBeFalsy();
    // borderless = true
    const { container: container2 } = render(<SelectInput borderless={true}></SelectInput>);
    expect(container2.firstChild).toHaveClass('t-select-input--borderless');
    // borderless = false
    const { container: container3 } = render(<SelectInput borderless={false}></SelectInput>);
    expect(container3.querySelector(`.${'t-select-input--borderless'}`)).toBeFalsy();
  });

  it('props.clearable: empty value can not show clear icon', async () => {
    const { container } = render(<SelectInput clearable={true}></SelectInput>);
    fireEvent.mouseEnter(container.querySelector('.t-input'));
    await mockDelay();
    expect(container.querySelector('.t-input__suffix-clear')).toBeFalsy();
  });

  it('props.clearable: show clear icon on mouse enter in single select input', async () => {
    const { container } = render(<SelectInput value={'tdesign'} clearable={true}></SelectInput>);
    fireEvent.mouseEnter(container.querySelector('.t-input'));
    await mockDelay();
    expect(container.querySelector('.t-input__suffix-clear')).toBeTruthy();
  });

  it('props.clearable: show clear icon on mouse enter in multiple select input', async () => {
    const { container } = render(<SelectInput value={['tdesign']} multiple={true} clearable={true}></SelectInput>);
    fireEvent.mouseEnter(container.querySelector('.t-input'));
    await mockDelay();
    expect(container.querySelector('.t-tag-input__suffix-clear')).toBeTruthy();
  });

  it('props.collapsedItems works fine', () => {
    const { container } = getSelectInputMultipleMount(SelectInput, {
      collapsedItems: <span className="custom-node">TNode</span>,
      minCollapsedNum: 3,
    });
    expect(container.querySelector('.custom-node')).toBeTruthy();
  });

  it('props.collapsedItems is a function with params', () => {
    const fn = vi.fn();
    getSelectInputMultipleMount(SelectInput, { collapsedItems: fn, minCollapsedNum: 3 });
    expect(fn).toHaveBeenCalled();
    expect(fn.mock.calls[0][0].count).toBe(2);
  });

  it('props.disabled works fine', () => {
    // disabled default value is
    const wrapper1 = render(<SelectInput></SelectInput>);
    const container1 = wrapper1.container.querySelector('.t-input');
    expect(container1.querySelector(`.${'t-is-disabled'}`)).toBeFalsy();
    // disabled = true
    const wrapper2 = render(<SelectInput disabled={true}></SelectInput>);
    const container2 = wrapper2.container.querySelector('.t-input');
    expect(container2).toHaveClass('t-is-disabled');
    // disabled = false
    const wrapper3 = render(<SelectInput disabled={false}></SelectInput>);
    const container3 = wrapper3.container.querySelector('.t-input');
    expect(container3.querySelector(`.${'t-is-disabled'}`)).toBeFalsy();
  });

  it('props.label works fine', () => {
    const { container } = render(<SelectInput label={<span className="custom-node">TNode</span>}></SelectInput>);
    expect(container.querySelector('.custom-node')).toBeTruthy();
  });

  it('props.loading works fine. `".t-loading"` should exist', () => {
    const { container } = render(<SelectInput loading={true}></SelectInput>);
    expect(container.querySelector('.t-loading')).toBeTruthy();
  });

  it('props.multiple: SelectInput contains element `.t-tag-input`', () => {
    // multiple default value is false
    const { container } = render(<SelectInput></SelectInput>);
    expect(container.querySelector('.t-tag-input')).toBeFalsy();
    // multiple = false
    const { container: container1 } = render(<SelectInput multiple={false}></SelectInput>);
    expect(container1.querySelector('.t-tag-input')).toBeFalsy();
    // multiple = true
    const { container: container2 } = render(<SelectInput multiple={true}></SelectInput>);
    expect(container2.querySelector('.t-tag-input')).toBeTruthy();
  });

  it('props.panel works fine', () => {
    const { container } = render(<SelectInput panel={<span className="custom-node">TNode</span>}></SelectInput>);
    fireEvent.click(container.querySelector('.t-input'));
    const customNodeDom = document.querySelector('.custom-node');
    expect(customNodeDom).toBeTruthy();
  });

  it('props.placeholder works fine', () => {
    const wrapper = render(<SelectInput placeholder={'This is SelectInput placeholder'}></SelectInput>);
    const container = wrapper.container.querySelector('input');
    expect(container.getAttribute('placeholder')).toBe('This is SelectInput placeholder');
  });

  const statusClassNameList = [{ 't-is-default': false }, 't-is-success', 't-is-warning', 't-is-error'];
  ['default', 'success', 'warning', 'error'].forEach((item, index) => {
    it(`props.status is equal to ${item}`, () => {
      const wrapper = render(<SelectInput status={item}></SelectInput>);
      const container = wrapper.container.querySelector('.t-input');
      if (typeof statusClassNameList[index] === 'string') {
        expect(container).toHaveClass(statusClassNameList[index]);
      } else if (typeof statusClassNameList[index] === 'object') {
        const classNameKey = Object.keys(statusClassNameList[index])[0];
        expect(container.querySelector(`.${classNameKey}`)).toBeFalsy();
      }
    });
  });

  it('props.suffix works fine', () => {
    const { container } = render(<SelectInput suffix={<span className="custom-node">TNode</span>}></SelectInput>);
    expect(container.querySelector('.custom-node')).toBeTruthy();
  });

  it('props.suffixIcon works fine', () => {
    const { container } = render(<SelectInput suffixIcon={<span className="custom-node">TNode</span>}></SelectInput>);
    expect(container.querySelector('.custom-node')).toBeTruthy();
  });

  it('props.tag works fine', () => {
    const { container } = render(
      <SelectInput
        tag={<span className="custom-node">TNode</span>}
        multiple={true}
        value={['tdesign-vue']}
      ></SelectInput>,
    );
    expect(container.querySelector('.custom-node')).toBeTruthy();
  });

  it('props.tag is a function with params', () => {
    const fn = vi.fn();
    render(<SelectInput tag={fn} multiple={true} value={['tdesign-vue']}></SelectInput>);
    expect(fn).toHaveBeenCalled();
    expect(fn.mock.calls[0][0].value).toBe('tdesign-vue');
  });

  it('props.tips is equal this is a tip', () => {
    const { container } = render(<SelectInput tips={'this is a tip'}></SelectInput>);
    expect(container.querySelectorAll('.t-input__tips').length).toBe(1);
  });
});
