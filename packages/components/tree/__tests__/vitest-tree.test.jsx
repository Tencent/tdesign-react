/* eslint-disable @typescript-eslint/no-unused-vars */
/**
 * 该文件由脚本自动生成，如需修改请联系 PMC
 * This file generated by scripts of tdesign-api. `npm run api:docs Tree React(PC) vitest,finalProject`
 * If you need to modify this file, contact PMC first please.
 */
import React from 'react';
import { fireEvent, vi, mockDelay } from '@test/utils';
import { Tree } from '..';
import { getTreeDefaultMount } from './mount';

describe('Tree Component', () => {
  it('props.activeMultiple works fine', async () => {
    const onActiveFn1 = vi.fn();
    const { container } = getTreeDefaultMount(
      Tree,
      { activable: true, defaultActived: [1], activeMultiple: true },
      { onActive: onActiveFn1 },
    );
    await mockDelay(300);
    expect(container.querySelectorAll('.t-tree__item').length).toBe(2);
    fireEvent.click(container.querySelector('.t-tree__item:nth-child(2)'));
    await mockDelay(300);
    expect(container.querySelectorAll('.t-tree__item.t-is-active').length).toBe(2);
    expect(onActiveFn1).toHaveBeenCalled();
    expect(onActiveFn1.mock.calls[0][0]).toEqual([1, 2]);
  });

  it('props.actived works fine', async () => {
    const onActiveFn1 = vi.fn();
    const { container } = getTreeDefaultMount(Tree, { activable: true, actived: [1] }, { onActive: onActiveFn1 });
    await mockDelay(300);
    expect(container.querySelectorAll('.t-tree__item').length).toBe(2);
    fireEvent.click(container.querySelector('.t-tree__item:nth-child(2)'));
    await mockDelay(300);
    expect(container.querySelectorAll('.t-tree__item.t-is-active').length).toBe(1);
    expect(onActiveFn1).toHaveBeenCalled();
    expect(onActiveFn1.mock.calls[0][0]).toEqual([2]);
  });

  it('props.disableCheck works fine', async () => {
    const onChangeFn1 = vi.fn();
    const { container } = getTreeDefaultMount(Tree, { checkable: true, disableCheck: true }, { onChange: onChangeFn1 });
    await mockDelay(300);
    expect(container.querySelectorAll('.t-checkbox__input').length).toBe(2);
    fireEvent.click(container.querySelector('.t-checkbox__input'));
    await mockDelay(300);
    expect(container.querySelectorAll('.t-is-checked').length).toBe(0);
    expect(onChangeFn1).not.toHaveBeenCalled();
  });

  it('props.draggable works fine', async () => {
    const onDragOverFn1 = vi.fn();
    const onDragEndFn2 = vi.fn();
    const onDragStartFn3 = vi.fn();
    const onDragLeaveFn4 = vi.fn();
    const { container } = getTreeDefaultMount(
      Tree,
      { checkable: true, disableCheck: true, draggable: true },
      { onDragOver: onDragOverFn1, onDragEnd: onDragEndFn2, onDragStart: onDragStartFn3, onDragLeave: onDragLeaveFn4 },
    );
    await mockDelay(300);
    fireEvent.dragOver(container.querySelector('.t-tree__item'));
    await mockDelay();
    expect(onDragOverFn1).toHaveBeenCalled();
    fireEvent.dragEnd(container.querySelector('.t-tree__item'));
    await mockDelay();
    expect(onDragEndFn2).toHaveBeenCalled();
    fireEvent.dragStart(container.querySelector('.t-tree__item'));
    await mockDelay();
    expect(onDragStartFn3).toHaveBeenCalled();
    fireEvent.dragLeave(container.querySelector('.t-tree__item'));
    await mockDelay();
    expect(onDragLeaveFn4).toHaveBeenCalled();
  });

  it('props.draggable works fine', async () => {
    const onDragEndFn1 = vi.fn();
    const onDropFn2 = vi.fn();
    const { container } = getTreeDefaultMount(
      Tree,
      { draggable: true },
      { onDragEnd: onDragEndFn1, onDrop: onDropFn2 },
    );
    await mockDelay(300);
    fireEvent.dragEnd(container.querySelector('.t-tree__item:nth-child(2)'));
    await mockDelay();
    expect(onDragEndFn1).toHaveBeenCalled();
    fireEvent.drop(container.querySelector('.t-tree__item'));
    await mockDelay();
    expect(onDropFn2).toHaveBeenCalled();
  });

  it('props.icon works fine', async () => {
    const { container } = getTreeDefaultMount(Tree, { icon: false });
    await mockDelay(300);
    expect(container.querySelectorAll('.t-tree__icon').length).toBe(2);
  });

  it('props.line works fine', async () => {
    const { container } = getTreeDefaultMount(Tree, { expandAll: true, line: true });
    await mockDelay(300);
    expect(container.querySelectorAll('.t-tree__line').length).toBe(2);
  });
});

describe('Tree Component', () => {
  it('props.disabled: TreeNode is not disabled && Tree is not disabled', async () => {
    const on0Fn1 = vi.fn();
    const on1Fn1 = vi.fn();
    const { container } = getTreeDefaultMount(
      Tree,
      { checkable: true, data: [{ value: 1, label: 1, disabled: false }], disabled: false },
      { on0: on0Fn1, on1: on1Fn1 },
    );
    await mockDelay(300);
    expect(container.querySelectorAll('.t-checkbox__input').length).toBe(1);
    fireEvent.click(container.querySelector('.t-checkbox__input'));
    await mockDelay(300);
    expect(container.querySelectorAll('.t-is-checked').length).toBe(1);
  });

  it('props.disabled: TreeNode is not disabled && Tree is disabled', async () => {
    const on0Fn1 = vi.fn();
    const on1Fn1 = vi.fn();
    const { container } = getTreeDefaultMount(
      Tree,
      { checkable: true, data: [{ value: 1, label: 1, disabled: false }], disabled: true },
      { on0: on0Fn1, on1: on1Fn1 },
    );
    await mockDelay(300);
    expect(container.querySelectorAll('.t-checkbox__input').length).toBe(1);
    fireEvent.click(container.querySelector('.t-checkbox__input'));
    await mockDelay(300);
    expect(container.querySelectorAll('.t-is-checked').length).toBe(0);
  });

  it('props.disabled: TreeNode is disabled && Tree is disabled', async () => {
    const on0Fn1 = vi.fn();
    const on1Fn1 = vi.fn();
    const { container } = getTreeDefaultMount(
      Tree,
      { checkable: true, data: [{ value: 1, label: 1, disabled: true }], disabled: true },
      { on0: on0Fn1, on1: on1Fn1 },
    );
    await mockDelay(300);
    expect(container.querySelectorAll('.t-checkbox__input').length).toBe(1);
    fireEvent.click(container.querySelector('.t-checkbox__input'));
    await mockDelay(300);
    expect(container.querySelectorAll('.t-is-checked').length).toBe(0);
  });

  it('props.disabled: TreeNode is disabled && Tree is not disabled', async () => {
    const on0Fn1 = vi.fn();
    const on1Fn1 = vi.fn();
    const { container } = getTreeDefaultMount(
      Tree,
      { checkable: true, data: [{ value: 1, label: 1, disabled: true }], disabled: false },
      { on0: on0Fn1, on1: on1Fn1 },
    );
    await mockDelay(300);
    expect(container.querySelectorAll('.t-checkbox__input').length).toBe(1);
    fireEvent.click(container.querySelector('.t-checkbox__input'));
    await mockDelay(300);
    expect(container.querySelectorAll('.t-is-checked').length).toBe(0);
  });
});
