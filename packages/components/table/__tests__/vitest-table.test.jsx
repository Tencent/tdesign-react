/**
 * 该文件由脚本自动生成，如需修改请联系 PMC
 * This file generated by scripts of tdesign-api. `npm run api:docs Table React(PC) vitest,finalProject`
 * If you need to modify this file, contact PMC first please.
 */
import React from 'react';
import { BaseTable } from '..';
import { getNormalTableMount, getEmptyDataTableMount } from './mount';

describe('BaseTable Component', () => {
  it('props.bordered works fine', () => {
    // bordered default value is false
    const { container: container1 } = getNormalTableMount(BaseTable);
    expect(container1.querySelector(`.${'t-table--bordered'}`)).toBeFalsy();
    // bordered = true
    const { container: container2 } = getNormalTableMount(BaseTable, { bordered: true });
    expect(container2.firstChild).toHaveClass('t-table--bordered');
    // bordered = false
    const { container: container3 } = getNormalTableMount(BaseTable, { bordered: false });
    expect(container3.querySelector(`.${'t-table--bordered'}`)).toBeFalsy();
  });

  it('props.bottomContent works fine', () => {
    const { container } = getNormalTableMount(BaseTable, { bottomContent: <span className="custom-node">TNode</span> });
    expect(container.querySelector('.custom-node')).toBeTruthy();
  });

  it('props.cellEmptyContent works fine', () => {
    const { container } = getNormalTableMount(BaseTable, {
      cellEmptyContent: <span className="custom-node">TNode</span>,
    });
    expect(container.querySelector('.custom-node')).toBeTruthy();
  });

  it('props.empty works fine', () => {
    const { container } = getEmptyDataTableMount(BaseTable, { empty: <span className="custom-node">TNode</span> });
    expect(container.querySelector('.custom-node')).toBeTruthy();
  });

  it('props.firstFullRow works fine', () => {
    const { container } = getNormalTableMount(BaseTable, { firstFullRow: <span className="custom-node">TNode</span> });
    expect(container.querySelector('.custom-node')).toBeTruthy();
    expect(container.querySelector('.t-table__first-full-row')).toBeTruthy();
    expect(container.querySelector('td[colspan="3"]')).toBeTruthy();
  });

  it('props.fixedRows is equal [3, 1]', () => {
    const { container } = getNormalTableMount(BaseTable, { fixedRows: [3, 1] });
    expect(container.querySelectorAll('.t-table__row--fixed-top').length).toBe(3);
    expect(container.querySelectorAll('.t-table__row--fixed-bottom').length).toBe(1);
  });

  it('props.footData works fine. `"tfoot.t-table__footer"` should exist', () => {
    const { container } = getNormalTableMount(BaseTable);
    expect(container.querySelector('tfoot.t-table__footer')).toBeTruthy();
  });

  it('props.footData works fine. `{"tfoot > tr":2}` should exist', () => {
    const { container } = getNormalTableMount(BaseTable);
    expect(container.querySelectorAll('tfoot > tr').length).toBe(2);
  });

  it('props.footerSummary works fine', () => {
    const { container } = getNormalTableMount(BaseTable, { footerSummary: <span className="custom-node">TNode</span> });
    expect(container.querySelector('.custom-node')).toBeTruthy();
    expect(container.querySelector('.t-table__footer')).toBeTruthy();
    expect(container.querySelector('.t-table__row-full-element')).toBeTruthy();
    expect(container.querySelector('td[colspan="3"]')).toBeTruthy();
  });

  it('props.hover works fine', () => {
    // hover default value is false
    const { container: container1 } = getNormalTableMount(BaseTable);
    expect(container1.querySelector(`.${'t-table--hoverable'}`)).toBeFalsy();
    // hover = true
    const { container: container2 } = getNormalTableMount(BaseTable, { hover: true });
    expect(container2.firstChild).toHaveClass('t-table--hoverable');
    // hover = false
    const { container: container3 } = getNormalTableMount(BaseTable, { hover: false });
    expect(container3.querySelector(`.${'t-table--hoverable'}`)).toBeFalsy();
  });

  it('props.lastFullRow works fine', () => {
    const { container } = getNormalTableMount(BaseTable, { lastFullRow: <span className="custom-node">TNode</span> });
    expect(container.querySelector('.custom-node')).toBeTruthy();
    expect(container.querySelector('.t-table__last-full-row')).toBeTruthy();
    expect(container.querySelector('td[colspan="3"]')).toBeTruthy();
  });

  it('props.loading works fine', () => {
    const { container } = getNormalTableMount(BaseTable, { loading: <span className="custom-node">TNode</span> });
    expect(container.querySelector('.custom-node')).toBeTruthy();
    expect(container.querySelector('.t-loading')).toBeTruthy();
  });

  it('props.loading: BaseTable contains element `.t-loading`', () => {
    // loading default value is undefined
    const { container } = getNormalTableMount(BaseTable);
    expect(container.querySelector('.t-loading')).toBeFalsy();
    // loading = false
    const { container: container1 } = getNormalTableMount(BaseTable, { loading: false });
    expect(container1.querySelector('.t-loading')).toBeFalsy();
    // loading = true
    const { container: container2 } = getNormalTableMount(BaseTable, { loading: true });
    expect(container2.querySelector('.t-loading')).toBeTruthy();
  });

  it('props.resizable works fine', () => {
    // resizable default value is false
    const { container: container1 } = getNormalTableMount(BaseTable);
    expect(container1.querySelector(`.${'t-table--column-resizable'}`)).toBeFalsy();
    // resizable = true
    const { container: container2 } = getNormalTableMount(BaseTable, { resizable: true });
    expect(container2.firstChild).toHaveClass('t-table--column-resizable');
    // resizable = false
    const { container: container3 } = getNormalTableMount(BaseTable, { resizable: false });
    expect(container3.querySelector(`.${'t-table--column-resizable'}`)).toBeFalsy();
  });

  it(`props.rowAttributes is equal to { 'data-level': 'level-1' }`, () => {
    const { container } = getNormalTableMount(BaseTable, { rowAttributes: { 'data-level': 'level-1' } });
    const domWrapper = container.querySelector('tbody > tr');
    expect(domWrapper.getAttribute('data-level')).toBe('level-1');
  });
  it(`props.rowAttributes is equal to [{ 'data-level': 'level-1' }, { 'data-name': 'tdesign' }]`, () => {
    const { container } = getNormalTableMount(BaseTable, {
      rowAttributes: [{ 'data-level': 'level-1' }, { 'data-name': 'tdesign' }],
    });
    const domWrapper = container.querySelector('tbody > tr');
    expect(domWrapper.getAttribute('data-level')).toBe('level-1');
    expect(domWrapper.getAttribute('data-name')).toBe('tdesign');
  });
  it(`props.rowAttributes is equal to () => [{ 'data-level': 'level-1' }, { 'data-name': 'tdesign' }]`, () => {
    const { container } = getNormalTableMount(BaseTable, {
      rowAttributes: () => [{ 'data-level': 'level-1' }, { 'data-name': 'tdesign' }],
    });
    const domWrapper = container.querySelector('tbody > tr');
    expect(domWrapper.getAttribute('data-level')).toBe('level-1');
    expect(domWrapper.getAttribute('data-name')).toBe('tdesign');
  });
  it(`props.rowAttributes is equal to [() => [{ 'data-level': 'level-1' }, { 'data-name': 'tdesign' }]]`, () => {
    const { container } = getNormalTableMount(BaseTable, {
      rowAttributes: [() => [{ 'data-level': 'level-1' }, { 'data-name': 'tdesign' }]],
    });
    const domWrapper = container.querySelector('tbody > tr');
    expect(domWrapper.getAttribute('data-level')).toBe('level-1');
    expect(domWrapper.getAttribute('data-name')).toBe('tdesign');
  });

  it(`props.rowClassName is equal to 'tdesign-class'`, () => {
    const { container } = getNormalTableMount(BaseTable, { rowClassName: 'tdesign-class' });
    const domWrapper = container.querySelector('tbody > tr');
    expect(domWrapper).toHaveClass('tdesign-class');
  });
  it(`props.rowClassName is equal to { 'tdesign-class': true, 'tdesign-class-next': false }`, () => {
    const { container } = getNormalTableMount(BaseTable, {
      rowClassName: { 'tdesign-class': true, 'tdesign-class-next': false },
    });
    const domWrapper = container.querySelector('tbody > tr');
    expect(domWrapper).toHaveClass('tdesign-class');
    expect(domWrapper.classList.contains('tdesign-class-next')).toBeFalsy();
  });
  it(`props.rowClassName is equal to ['tdesign-class-default', { 'tdesign-class': true, 'tdesign-class-next': false }]`, () => {
    const { container } = getNormalTableMount(BaseTable, {
      rowClassName: ['tdesign-class-default', { 'tdesign-class': true, 'tdesign-class-next': false }],
    });
    const domWrapper = container.querySelector('tbody > tr');
    expect(domWrapper).toHaveClass('tdesign-class-default');
    expect(domWrapper).toHaveClass('tdesign-class');
    expect(domWrapper.classList.contains('tdesign-class-next')).toBeFalsy();
  });
  it(`props.rowClassName is equal to () => ({ 'tdesign-class': true, 'tdesign-class-next': false })`, () => {
    const { container } = getNormalTableMount(BaseTable, {
      rowClassName: () => ({ 'tdesign-class': true, 'tdesign-class-next': false }),
    });
    const domWrapper = container.querySelector('tbody > tr');
    expect(domWrapper).toHaveClass('tdesign-class');
    expect(domWrapper.classList.contains('tdesign-class-next')).toBeFalsy();
  });

  it('props.showHeader: BaseTable contains element `thead`', () => {
    // showHeader default value is true
    const { container } = getNormalTableMount(BaseTable);
    expect(container.querySelector('thead')).toBeTruthy();
    // showHeader = false
    const { container: container1 } = getNormalTableMount(BaseTable, { showHeader: false });
    expect(container1.querySelector('thead')).toBeFalsy();
    // showHeader = true
    const { container: container2 } = getNormalTableMount(BaseTable, { showHeader: true });
    expect(container2.querySelector('thead')).toBeTruthy();
    expect(container2).toMatchSnapshot();
  });

  const sizeClassNameList = ['t-size-s', { 't-size-m': false }, 't-size-l'];
  ['small', 'medium', 'large'].forEach((item, index) => {
    it(`props.size is equal to ${item}`, () => {
      const { container } = getNormalTableMount(BaseTable, { size: item });
      if (typeof sizeClassNameList[index] === 'string') {
        expect(container.firstChild).toHaveClass(sizeClassNameList[index]);
      } else if (typeof sizeClassNameList[index] === 'object') {
        const classNameKey = Object.keys(sizeClassNameList[index])[0];
        expect(container.querySelector(`.${classNameKey}`)).toBeFalsy();
      }
      expect(container).toMatchSnapshot();
    });
  });

  it('props.stripe works fine', () => {
    // stripe default value is false
    const { container: container1 } = getNormalTableMount(BaseTable);
    expect(container1.querySelector(`.${'t-table--striped'}`)).toBeFalsy();
    // stripe = true
    const { container: container2 } = getNormalTableMount(BaseTable, { stripe: true });
    expect(container2.firstChild).toHaveClass('t-table--striped');
    // stripe = false
    const { container: container3 } = getNormalTableMount(BaseTable, { stripe: false });
    expect(container3.querySelector(`.${'t-table--striped'}`)).toBeFalsy();
  });

  const tableLayoutExpectedDom = ['table.t-table--layout-auto', 'table.t-table--layout-fixed'];
  ['auto', 'fixed'].forEach((item, index) => {
    it(`props.tableLayout is equal to ${item}`, () => {
      const { container } = getNormalTableMount(BaseTable, { tableLayout: item });
      expect(container.querySelector(tableLayoutExpectedDom[index])).toBeTruthy();
      expect(container).toMatchSnapshot();
    });
  });

  it('props.topContent works fine', () => {
    const { container } = getNormalTableMount(BaseTable, { topContent: <span className="custom-node">TNode</span> });
    expect(container.querySelector('.custom-node')).toBeTruthy();
  });

  const verticalAlignClassNameList = [
    't-vertical-align-top',
    { 't-vertical-align-middle': false },
    't-vertical-align-bottom',
  ];
  ['top', 'middle', 'bottom'].forEach((item, index) => {
    it(`props.verticalAlign is equal to ${item}`, () => {
      const { container } = getNormalTableMount(BaseTable, { verticalAlign: item });
      if (typeof verticalAlignClassNameList[index] === 'string') {
        expect(container.firstChild).toHaveClass(verticalAlignClassNameList[index]);
      } else if (typeof verticalAlignClassNameList[index] === 'object') {
        const classNameKey = Object.keys(verticalAlignClassNameList[index])[0];
        expect(container.querySelector(`.${classNameKey}`)).toBeFalsy();
      }
    });
  });
});
